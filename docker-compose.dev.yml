# Yun AI TodoList - 开发环境 Docker Compose 配置
# 支持热重载和开发工具
# ===========================================

services:
  # PostgreSQL 数据库 (开发环境)
  postgres-dev:
    image: docker.m.daocloud.io/library/postgres:15-alpine
    container_name: yun-todolist-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: yun_todo_db
      POSTGRES_USER: yun_todo_user
      POSTGRES_PASSWORD: postgres123
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=C --lc-ctype=C'
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./apps/backend/init-scripts:/docker-entrypoint-initdb.d:ro
    ports:
      - '5432:5432'
    networks:
      - todolist-dev-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U yun_todo_user -d yun_todo_db']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 缓存 (开发环境)
  redis-dev:
    image: docker.m.daocloud.io/library/redis:7-alpine
    container_name: yun-todolist-redis-dev
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_dev_data:/data
    ports:
      - '6380:6379'
    networks:
      - todolist-dev-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5

  # 后端开发服务 (支持热重载) - 优化版本
  backend-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: backend-dev
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: yun-todolist-backend-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 8888
      DATABASE_URL: postgresql://yun_todo_user:postgres123@postgres-dev:5432/yun_todo_db
      DATABASE_HOST: postgres-dev
      DATABASE_PORT: 5432
      DATABASE_NAME: yun_todo_db
      DATABASE_USER: yun_todo_user
      DATABASE_PASSWORD: postgres123
      REDIS_HOST: redis-dev
      REDIS_PORT: 6379
      JWT_SECRET: dev-jwt-secret-key
      JWT_EXPIRES_IN: 24h
      JWT_REFRESH_SECRET: dev-refresh-secret-key
      JWT_REFRESH_EXPIRES_IN: 7d
      BCRYPT_ROUNDS: 10
      FRONTEND_URL: http://localhost:5173
      LOG_LEVEL: debug
      # SMTP 邮件配置
      SMTP_HOST: smtp.qq.com
      SMTP_PORT: 587
      SMTP_SECURE: false
      SMTP_USER: 1416900346@qq.com
      SMTP_PASSWORD: pezjeplbzkonidjh
      SMTP_FROM: 1416900346@qq.com
      # 优化环境变量
      CHOKIDAR_USEPOLLING: true
      WATCHPACK_POLLING: true
    volumes:
      # 挂载源代码以支持热重载（优化版本）
      - ./apps/backend/src:/app/apps/backend/src:cached
      - ./apps/backend/prisma:/app/apps/backend/prisma:cached
      - ./packages:/app/packages:cached
      # 挂载 node_modules 以提高性能
      - backend_dev_node_modules:/app/node_modules
      # 挂载日志目录
      - ./apps/backend/logs:/app/apps/backend/logs
    ports:
      - '8888:8888'
      - '9229:9229' # Node.js 调试端口
    depends_on:
      postgres-dev:
        condition: service_healthy
      redis-dev:
        condition: service_healthy
    networks:
      - todolist-dev-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8888/api/v1/health']
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # 前端开发服务 (支持热重载) - 优化版本
  frontend-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: frontend-dev
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: yun-todolist-frontend-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      VITE_API_BASE_URL: http://localhost:8888/api/v1
      DOCKER_ENV: true
      # 优化环境变量
      CHOKIDAR_USEPOLLING: true
      VITE_HMR_PORT: 5173
    volumes:
      # 挂载源代码以支持热重载（优化版本）
      - ./apps/frontend/src:/app/apps/frontend/src:cached
      - ./apps/frontend/public:/app/apps/frontend/public:cached
      - ./apps/frontend/index.html:/app/apps/frontend/index.html:cached
      - ./apps/frontend/vite.config.ts:/app/apps/frontend/vite.config.ts:cached
      - ./apps/frontend/uno.config.ts:/app/apps/frontend/uno.config.ts:cached
      - ./packages:/app/packages:cached
      # 挂载 node_modules 以提高性能
      - frontend_dev_node_modules:/app/node_modules
      # 创建前端应用专用的 node_modules 卷
      - frontend_app_node_modules:/app/apps/frontend/node_modules
    ports:
      - '5173:3001'
    depends_on:
      - backend-dev
    networks:
      - todolist-dev-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3001']
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # 数据库管理工具
  adminer:
    image: docker.m.daocloud.io/library/adminer:4.8.1
    container_name: yun-todolist-adminer
    restart: unless-stopped
    ports:
      - '8080:8080'
    networks:
      - todolist-dev-network
    environment:
      ADMINER_DEFAULT_SERVER: postgres-dev

networks:
  todolist-dev-network:
    driver: bridge
    name: yun-todolist-dev-network

volumes:
  postgres_dev_data:
    name: yun-todolist-postgres-dev-data
  redis_dev_data:
    name: yun-todolist-redis-dev-data
  # 开发环境 node_modules 卷，提高性能
  backend_dev_node_modules:
    name: yun-todolist-backend-dev-node-modules
  frontend_dev_node_modules:
    name: yun-todolist-frontend-dev-node-modules
  frontend_app_node_modules:
    name: yun-todolist-frontend-app-node-modules
