name: 🧪 Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 每天凌晨 2 点运行回归测试
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '9.0.0'

jobs:
  # 单元测试和集成测试
  test:
    name: 🔬 Unit & Integration Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: 📥 Install dependencies
        run: |
          pnpm install --frozen-lockfile || {
            echo "⚠️ Frozen lockfile failed, trying regular install..."
            pnpm install
          }

      - name: 🔍 Type check
        run: pnpm run type-check

      - name: 🧹 Lint check
        run: pnpm run lint:check

      - name: 💅 Format check
        run: pnpm run format:check

      - name: 🧪 Run unit tests
        run: pnpm run test:coverage
        continue-on-error: true

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: 📈 Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ matrix.node-version }}
          path: coverage/

  # 构建测试
  build:
    name: 🏗️ Build Test
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📥 Install dependencies
        run: |
          pnpm install --frozen-lockfile || {
            echo "⚠️ Frozen lockfile failed, trying regular install..."
            pnpm install
          }

      - name: 🏗️ Build application
        run: pnpm run build

      - name: 🔍 Verify build output
        run: |
          if [ ! -d "apps/frontend/dist" ]; then
            echo "❌ Build failed: frontend dist directory not found"
            echo "Available dist directories:"
            find . -name "dist" -type d 2>/dev/null || echo "No dist directories found"
            exit 1
          fi
          echo "✅ Build successful: apps/frontend/dist directory exists"
          ls -la apps/frontend/dist/

          # Create symlink for compatibility
          if [ -L "dist" ]; then
            rm dist
          elif [ -d "dist" ] && [ ! -L "dist" ]; then
            rm -rf dist
          fi
          ln -sf apps/frontend/dist dist
          echo "✅ Created symlink: dist -> apps/frontend/dist"

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: apps/frontend/dist/
          if-no-files-found: error
          retention-days: 1

  # 性能测试
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: success()

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📥 Install dependencies
        run: |
          pnpm install --frozen-lockfile || {
            echo "⚠️ Frozen lockfile failed, trying regular install..."
            pnpm install
          }

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/
        continue-on-error: false

      - name: 🔍 Verify downloaded artifacts
        run: |
          if [ ! -d "dist" ] || [ -z "$(ls -A dist)" ]; then
            echo "❌ Build artifacts not found or empty"
            exit 1
          fi
          echo "✅ Build artifacts verified"
          ls -la dist/

      - name: ⚡ Run performance benchmarks
        run: pnpm run perf:benchmark
        continue-on-error: true

      - name: 📊 Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: performance-results.json

  # 安全扫描
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📥 Install dependencies
        run: |
          pnpm install --frozen-lockfile || {
            echo "⚠️ Frozen lockfile failed, trying regular install..."
            pnpm install
          }

      - name: 🔍 Run security audit
        run: |
          # 临时切换到官方 registry 进行 audit
          pnpm config set registry https://registry.npmjs.org

          echo "🔍 Running security audit with known CVE exceptions..."
          echo "📋 Ignoring xlsx CVEs: CVE-2024-22363, GHSA-4r6h-8v6p-xvw6, GHSA-5pgg-2g8v-p4x9"
          echo "💡 Reason: Low risk in our controlled environment - only parsing user-uploaded files with size limits"

          # 运行 audit 并过滤掉已知的 xlsx 漏洞
          pnpm audit --audit-level moderate --json > audit-results.json || true

          # 检查是否有除 xlsx 之外的其他高危漏洞
          if [ -f "audit-results.json" ]; then
            # 提取非 xlsx 相关的漏洞
            cat audit-results.json | jq -r '.advisories | to_entries[] | select(.value.module_name != "xlsx") | .value' > non-xlsx-vulnerabilities.json || true

            # 如果有非 xlsx 的漏洞，则失败
            if [ -s "non-xlsx-vulnerabilities.json" ]; then
              echo "❌ Found security vulnerabilities in packages other than xlsx:"
              cat non-xlsx-vulnerabilities.json
              exit 1
            else
              echo "✅ No security vulnerabilities found (xlsx vulnerabilities ignored as documented)"
            fi
          else
            echo "✅ No security vulnerabilities found"
          fi

          # 恢复原始 registry 配置
          pnpm config set registry https://registry.npmmirror.com

      - name: 🔒 Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: 🔒 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # 依赖检查
  dependency-check:
    name: 📦 Dependency Check
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📥 Install dependencies
        run: |
          pnpm install --frozen-lockfile || {
            echo "⚠️ Frozen lockfile failed, trying regular install..."
            pnpm install
          }

      - name: 🔍 Check for outdated dependencies
        run: pnpm outdated || true

      - name: 📊 Generate dependency report
        run: |
          pnpm list --depth=0 --json > dependency-report.json
          echo "## 📦 Dependencies Report" >> $GITHUB_STEP_SUMMARY
          echo "Generated dependency report with $(jq '.dependencies | length' dependency-report.json) direct dependencies" >> $GITHUB_STEP_SUMMARY

      - name: 📦 Upload dependency report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-report
          path: dependency-report.json

  # 测试报告汇总
  test-summary:
    name: 📋 Test Summary
    runs-on: ubuntu-latest
    needs: [test, build, performance, security, dependency-check]
    if: always()

    steps:
      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true

      - name: 📋 List available artifacts
        run: |
          echo "Available artifacts:"
          ls -la . || echo "No artifacts found"

      - name: 📊 Generate test summary
        run: |
          echo "# 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -d "coverage-reports-18" ]; then
            echo "## 📈 Coverage Report (Node 18)" >> $GITHUB_STEP_SUMMARY
            echo "Coverage reports generated successfully" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "build-files/index.html" ]; then
            echo "## ✅ Build Status" >> $GITHUB_STEP_SUMMARY
            echo "Application built successfully" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "performance-results.json" ]; then
            echo "## ⚡ Performance Results" >> $GITHUB_STEP_SUMMARY
            echo "Performance benchmarks completed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          echo "## 🎯 Test Matrix Results" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build Test: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Performance: ${{ needs.performance.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Dependencies: ${{ needs.dependency-check.result }}" >> $GITHUB_STEP_SUMMARY

  # 通知
  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: 📢 Notify on success
        if: needs.test-summary.result == 'success'
        run: |
          echo "✅ All tests passed successfully!"
          echo "Ready for deployment 🚀"

      - name: 📢 Notify on failure
        if: needs.test-summary.result == 'failure'
        run: |
          echo "❌ Some tests failed!"
          echo "Please check the test results and fix issues before merging."
          exit 1
