name: Security Audit Fix

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # 每周一凌晨 2 点运行安全审计
    - cron: '0 2 * * 1'

jobs:
  audit:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9.0.0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'

    - name: Install dependencies
      run: |
        # 临时切换到官方 registry 进行 audit
        pnpm config set registry https://registry.npmjs.org
        pnpm install

    - name: Run security audit
      run: |
        # 使用官方 registry 运行 audit，忽略已知的 xlsx CVE
        echo "Running security audit with known CVE exceptions..."
        echo "Ignoring xlsx CVEs: CVE-2024-22363, GHSA-4r6h-8v6p-xvw6, GHSA-5pgg-2g8v-p4x9"
        echo "Reason: Low risk in our controlled environment - only parsing user-uploaded files with size limits"

        # 运行 audit 并过滤掉已知的 xlsx 漏洞
        pnpm audit --audit-level moderate --registry https://registry.npmjs.org --json > audit-results.json || true

        # 检查是否有除 xlsx 之外的其他高危漏洞
        if [ -f "audit-results.json" ]; then
          # 提取非 xlsx 相关的漏洞
          cat audit-results.json | jq -r '.advisories | to_entries[] | select(.value.module_name != "xlsx") | .value' > non-xlsx-vulnerabilities.json || true

          # 如果有非 xlsx 的漏洞，则失败
          if [ -s "non-xlsx-vulnerabilities.json" ]; then
            echo "❌ Found security vulnerabilities in packages other than xlsx:"
            cat non-xlsx-vulnerabilities.json
            exit 1
          else
            echo "✅ No security vulnerabilities found (xlsx vulnerabilities ignored as documented)"
          fi
        else
          echo "✅ No security vulnerabilities found"
        fi

    - name: Restore registry config
      if: always()
      run: |
        # 恢复原始 registry 配置
        pnpm config set registry https://registry.npmmirror.com
