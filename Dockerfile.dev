# ===========================================
# Yun AI TodoList - 优化的开发环境 Docker 配置
# 支持热重载和开发工具，优化构建速度
# ===========================================

# ===========================================
# 基础开发镜像 - 优化版本
# ===========================================
FROM docker.m.daocloud.io/library/node:18-alpine AS dev-base

# 设置工作目录
WORKDIR /app

# 设置环境变量优化构建
ENV NODE_ENV=development
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
ENV CI=true
ENV HUSKY=0

# 使用国内镜像源加速包安装
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories

# 安装系统依赖和开发工具（优化版本）
RUN apk update && apk add --no-cache \
  libc6-compat \
  python3 \
  make \
  g++ \
  curl \
  git \
  bash \
  dumb-init \
  && npm config set registry https://registry.npmmirror.com \
  && npm install -g pnpm@9.0.0 nodemon \
  && pnpm config set registry https://registry.npmmirror.com \
  && pnpm config set network-timeout 600000 \
  && pnpm config set fetch-retries 10 \
  && pnpm config set fetch-retry-mintimeout 20000 \
  && pnpm config set fetch-retry-maxtimeout 120000 \
  && pnpm config set electron_mirror https://npmmirror.com/mirrors/electron/ \
  && pnpm config set electron_custom_dir "{{ version }}"

# 创建非 root 用户（开发环境）
RUN addgroup -g 1001 -S nodejs && \
  adduser -S developer -u 1001 -G nodejs

# ===========================================
# 前端开发环境 - 优化版本
# ===========================================
FROM dev-base AS frontend-dev

# 设置环境变量
ENV VITE_API_BASE_URL=http://localhost:3000/api/v1
ENV ELECTRON_SKIP_BINARY_DOWNLOAD=1
ENV ELECTRON_MIRROR=https://npmmirror.com/mirrors/electron/
ENV ELECTRON_CUSTOM_DIR="{{ version }}"
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=1
ENV PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1

# 复制 workspace 配置（优化缓存层）
COPY --chown=developer:nodejs package.json pnpm-lock.yaml pnpm-workspace.yaml ./

# 创建应用目录并设置权限
RUN mkdir -p /app/apps/frontend/node_modules && \
    chown -R developer:nodejs /app/apps && \
    chmod -R 755 /app/apps

# 复制前端相关的 package.json（分层复制优化缓存）
COPY --chown=developer:nodejs apps/frontend/package.json ./apps/frontend/
COPY --chown=developer:nodejs packages/shared/package.json ./packages/shared/
COPY --chown=developer:nodejs tools/eslint-config/package.json ./tools/eslint-config/
COPY --chown=developer:nodejs tools/typescript-config/package.json ./tools/typescript-config/

# 复制 TypeScript 配置文件
COPY --chown=developer:nodejs tools/typescript-config/ ./tools/typescript-config/

# 复制前端配置文件
COPY --chown=developer:nodejs apps/frontend/tsconfig*.json ./apps/frontend/
COPY --chown=developer:nodejs apps/frontend/vite*.config.ts ./apps/frontend/
COPY --chown=developer:nodejs apps/frontend/uno.config.ts ./apps/frontend/
COPY --chown=developer:nodejs apps/frontend/eslint.config.js ./apps/frontend/
COPY --chown=developer:nodejs tsconfig.json ./

# 复制 Prisma schema（用于类型生成）
COPY --chown=developer:nodejs apps/backend/prisma ./apps/backend/prisma

# 安装依赖（优化版本）
RUN --mount=type=cache,target=/root/.local/share/pnpm/store,uid=1001,gid=1001 \
    pnpm install --frozen-lockfile --prefer-offline && \
    chown -R developer:nodejs /app/node_modules && \
    chmod -R 755 /app/node_modules

# 安装 sudo 并配置无密码权限
RUN apk add --no-cache sudo && \
    echo 'developer ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers

# 创建启动脚本
RUN echo '#!/bin/bash' > /app/start-frontend.sh && \
    echo 'set -e' >> /app/start-frontend.sh && \
    echo 'echo "Fixing permissions..."' >> /app/start-frontend.sh && \
    echo 'sudo chown -R developer:nodejs /app/apps/frontend/node_modules || true' >> /app/start-frontend.sh && \
    echo 'sudo chmod -R 755 /app/apps/frontend/node_modules || true' >> /app/start-frontend.sh && \
    echo 'echo "Starting frontend development server..."' >> /app/start-frontend.sh && \
    echo 'exec pnpm --filter frontend dev --host 0.0.0.0' >> /app/start-frontend.sh && \
    chmod +x /app/start-frontend.sh && \
    chown developer:nodejs /app/start-frontend.sh

# 切换到非 root 用户
USER developer

# 暴露端口
EXPOSE 5173

# 健康检查（优化版本）
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
  CMD curl -f http://localhost:5173 || exit 1

# 启动开发服务器（源代码通过 volume 挂载）
CMD ["/app/start-frontend.sh"]

# ===========================================
# 后端开发环境 - 优化版本
# ===========================================
FROM dev-base AS backend-dev

# 设置环境变量
ENV PORT=3000
ENV ELECTRON_SKIP_BINARY_DOWNLOAD=1
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=1
ENV PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1

# 复制 workspace 配置（优化缓存层）
COPY --chown=developer:nodejs package.json pnpm-lock.yaml pnpm-workspace.yaml ./

# 复制后端相关的 package.json（分层复制优化缓存）
COPY --chown=developer:nodejs apps/backend/package.json ./apps/backend/
COPY --chown=developer:nodejs packages/shared/package.json ./packages/shared/
COPY --chown=developer:nodejs tools/eslint-config/package.json ./tools/eslint-config/
COPY --chown=developer:nodejs tools/typescript-config/package.json ./tools/typescript-config/

# 复制后端配置文件
COPY --chown=developer:nodejs apps/backend/tsconfig.json ./apps/backend/
COPY --chown=developer:nodejs apps/backend/nest-cli.json ./apps/backend/
COPY --chown=developer:nodejs tsconfig.json ./

# 复制 Prisma schema
COPY --chown=developer:nodejs apps/backend/prisma ./apps/backend/prisma

# 安装依赖（优化版本）
RUN --mount=type=cache,target=/root/.local/share/pnpm/store,uid=1001,gid=1001 \
    pnpm install --frozen-lockfile --prefer-offline

# 切换到非 root 用户
USER developer

# 暴露端口（包括调试端口）
EXPOSE 3000 9229

# 健康检查（优化版本）
HEALTHCHECK --interval=30s --timeout=5s --start-period=20s --retries=3 \
  CMD curl -f http://localhost:3000/api/v1/health || exit 1

# 启动开发服务器（源代码通过 volume 挂载）
CMD ["pnpm", "--filter", "backend", "dev"]

# ===========================================
# 全栈开发环境（可选）
# ===========================================
FROM dev-base AS fullstack-dev

# 设置环境变量
ENV NODE_ENV=development
ENV FRONTEND_PORT=5173
ENV BACKEND_PORT=3000

# 复制 workspace 配置
COPY --chown=developer:nodejs package.json pnpm-lock.yaml pnpm-workspace.yaml ./

# 复制全栈 package.json
COPY --chown=developer:nodejs apps/*/package.json ./apps/*/
COPY --chown=developer:nodejs packages/shared/package.json ./packages/shared/
COPY --chown=developer:nodejs tools/eslint-config/package.json ./tools/eslint-config/
COPY --chown=developer:nodejs tools/typescript-config/package.json ./tools/typescript-config/

# 安装依赖
RUN pnpm install --frozen-lockfile

# 安装 concurrently 用于同时运行前后端
RUN pnpm add -g concurrently

# 切换到非 root 用户
USER developer

# 暴露端口
EXPOSE 3000 5173

# 启动全栈开发服务器
CMD ["pnpm", "dev:all"]
