generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// 用户表 - 存储用户基本信息和账户状态
model User {
  id            String           @id @default(cuid()) /// 用户唯一标识符
  email         String           @unique /// 用户邮箱地址，用于登录和通知
  username      String           @unique /// 用户名，用于显示和登录
  password      String?          /// 密码哈希，OAuth用户可为空
  avatarUrl     String?          /// 用户头像URL
  emailVerified Boolean          @default(false) /// 邮箱是否已验证
  createdAt     DateTime         @default(now()) /// 账户创建时间
  updatedAt     DateTime         @updatedAt /// 最后更新时间
  accountStatus String           @default("active") /// 账户状态：active/inactive/suspended/deleted
  deletedAt     DateTime?        /// 软删除时间戳
  lastActiveAt  DateTime?        /// 最后活跃时间
  todos         Todo[]
  preferences   UserPreferences?
  emailCodes    EmailVerificationCode[]

  @@index([lastActiveAt], map: "idx_users_last_active")
  @@index([deletedAt], map: "idx_users_soft_delete")
  @@index([accountStatus], map: "idx_users_account_status")
  @@index([emailVerified], map: "idx_users_email_verified")
  @@map("users")
}

/// 用户偏好设置表 - 存储所有用户配置信息（简化版）
model UserPreferences {
  id                   String   @id @default(cuid())
  userId               String   @unique
  theme                String   @default("light") /// 主题设置：light/dark
  language             String   @default("zh-CN") /// 语言设置：zh-CN/en-US等

  // AI 配置
  aiEnabled            Boolean  @default(true) /// AI功能是否启用
  aiModel              String   @default("deepseek-chat") /// AI模型选择
  aiTemperature        Float    @default(0.3) /// AI温度参数 (0-2)
  aiMaxTokens          Int      @default(1000) /// AI最大token数
  autoAnalyze          Boolean  @default(true) /// 自动分析任务
  priorityAnalysis     Boolean  @default(true) /// 优先级分析
  timeEstimation       Boolean  @default(true) /// 时间估算
  subtaskSplitting     Boolean  @default(true) /// 子任务拆分

  // 通知配置
  desktopNotifications Boolean  @default(true) /// 桌面通知
  emailNotifications   Boolean  @default(false) /// 邮件通知
  dueReminder          Boolean  @default(true) /// 到期提醒
  reminderMinutes      Int      @default(30) /// 提醒提前时间（分钟）

  // 搜索配置
  searchLanguage       String   @default("zh-CN") /// 搜索语言
  safeSearch           Boolean  @default(true) /// 安全搜索
  defaultResultCount   Int      @default(10) /// 默认结果数量
  searchEngine         String   @default("google") /// 搜索引擎
  searchRegion         String   @default("CN") /// 搜索区域

  // 存储配置
  storageMode          String   @default("hybrid") /// 存储模式
  autoSync             Boolean  @default(true) /// 自动同步
  syncInterval         Int      @default(5) /// 同步间隔（分钟）
  offlineMode          Boolean  @default(true) /// 离线模式
  conflictResolution   String   @default("merge") /// 冲突解决策略
  retryAttempts        Int      @default(3) /// 重试次数
  requestTimeout       Int      @default(10000) /// 请求超时时间（毫秒）

  // 高级配置（JSON格式存储复杂配置）
  advancedConfig       Json?    /// 高级配置，JSON格式

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_user_preferences_user_id")
  @@index([theme], map: "idx_user_preferences_theme")
  @@index([language], map: "idx_user_preferences_language")
  @@map("user_preferences")
}



/// 待办事项表 - 存储用户的任务和相关信息
model Todo {
  id            String    @id @default(cuid()) /// 待办事项唯一标识符
  title         String    /// 待办事项标题 (1-200字符)
  description   String?   /// 详细描述
  completed     Boolean   @default(false) /// 是否已完成
  completedAt   DateTime? /// 完成时间
  priority      Int?      /// 优先级 (1-5，5为最高)
  estimatedTime Int?      /// 预估时间（分钟）
  aiAnalyzed    Boolean   @default(false)
  order         Int       @default(0)
  dueDate       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  aiReasoning   String?
  deletedAt     DateTime?
  version       Int       @default(1)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, completed, dueDate], map: "idx_todos_user_status_due")
  @@index([userId, createdAt], map: "idx_todos_user_created")
  @@index([userId, completed, priority], map: "idx_todos_user_status_priority")
  @@index([userId, title, completed], map: "idx_todos_user_title_status")
  @@index([priority], map: "idx_todos_priority")
  @@index([deletedAt], map: "idx_todos_soft_delete")
  @@map("todos")
}




model EmailVerificationCode {
  id        String   @id @default(cuid())
  email     String
  code      String
  type      String   // 'register' | 'login' | 'reset_password'
  expiresAt DateTime
  used      Boolean  @default(false)
  attempts  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email, type, expiresAt], map: "idx_email_codes_lookup")
  @@index([code], map: "idx_email_codes_code")
  @@index([expiresAt], map: "idx_email_codes_expires")
  @@map("email_verification_codes")
}
