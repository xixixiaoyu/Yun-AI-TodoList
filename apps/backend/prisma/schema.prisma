generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String           @id @default(cuid())
  email         String           @unique
  username      String           @unique
  password      String?
  googleId      String?          @unique
  avatarUrl     String?
  emailVerified Boolean          @default(false)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  accountStatus String           @default("active")
  deletedAt     DateTime?
  lastActiveAt  DateTime?
  todos         Todo[]
  documents     Document[]
  preferences   UserPreferences?
  settings      UserSetting[]
  emailCodes    EmailVerificationCode[]

  @@index([lastActiveAt], map: "idx_users_last_active")
  @@index([deletedAt], map: "idx_users_soft_delete")
  @@index([accountStatus], map: "idx_users_account_status")
  @@index([emailVerified], map: "idx_users_email_verified")
  @@index([googleId], map: "idx_users_google_id")
  @@map("users")
}

model UserPreferences {
  id                   String   @id @default(cuid())
  userId               String   @unique
  theme                String   @default("light")
  language             String   @default("zh-CN")
  aiEnabled            Boolean  @default(true)
  autoAnalyze          Boolean  @default(true)
  priorityAnalysis     Boolean  @default(true)
  timeEstimation       Boolean  @default(true)
  subtaskSplitting     Boolean  @default(true)
  aiModel              String   @default("deepseek-chat")
  aiTemperature        Float    @default(0.3)
  aiMaxTokens          Int      @default(1000)
  searchLanguage       String   @default("zh-CN")
  safeSearch           Boolean  @default(true)
  defaultResultCount   Int      @default(10)
  searchEngine         String   @default("google")
  searchRegion         String   @default("CN")
  desktopNotifications Boolean  @default(true)
  emailNotifications   Boolean  @default(false)
  dueReminder          Boolean  @default(true)
  reminderMinutes      Int      @default(30)
  storageMode          String   @default("hybrid")
  autoSync             Boolean  @default(true)
  syncInterval         Int      @default(5)
  offlineMode          Boolean  @default(true)
  conflictResolution   String   @default("merge")
  retryAttempts        Int      @default(3)
  requestTimeout       Int      @default(10000)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model Todo {
  id            String    @id @default(cuid())
  title         String
  description   String?
  completed     Boolean   @default(false)
  completedAt   DateTime?
  priority      Int?
  estimatedTime String?
  aiAnalyzed    Boolean   @default(false)
  order         Int       @default(0)
  dueDate       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  aiReasoning   String?
  deletedAt     DateTime?
  version       Int       @default(1)
  documentId    String?   // 关联的文档ID
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  document      Document? @relation(fields: [documentId], references: [id], onDelete: SetNull)

  @@index([userId, completed, dueDate], map: "idx_todos_user_status_due")
  @@index([userId, createdAt], map: "idx_todos_user_created")
  @@index([priority], map: "idx_todos_priority")
  @@index([deletedAt], map: "idx_todos_soft_delete")
  @@index([documentId], map: "idx_todos_document")
  @@map("todos")
}

model UserSetting {
  id        String    @id @default(cuid())
  key       String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  deletedAt DateTime?
  version   Int       @default(1)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
  @@index([deletedAt], map: "idx_user_settings_soft_delete")
  @@map("user_settings")
}

model Document {
  id          String          @id @default(cuid())
  userId      String
  filename    String
  fileType    String
  fileSize    Int
  content     String          @db.Text
  metadata    Json?
  processed   Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  deletedAt   DateTime?
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  chunks      DocumentChunk[]
  todos       Todo[]

  @@index([userId, createdAt], map: "idx_documents_user_created")
  @@index([fileType], map: "idx_documents_file_type")
  @@index([processed], map: "idx_documents_processed")
  @@index([deletedAt], map: "idx_documents_soft_delete")
  @@map("documents")
}

model DocumentChunk {
  id         String   @id @default(cuid())
  documentId String
  chunkIndex Int
  content    String   @db.Text
  metadata   Json?
  createdAt  DateTime @default(now())
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, chunkIndex])
  @@index([documentId], map: "idx_document_chunks_document")
  @@map("document_chunks")
}

model EmailVerificationCode {
  id        String   @id @default(cuid())
  email     String
  code      String
  type      String   // 'register' | 'login' | 'reset_password'
  expiresAt DateTime
  used      Boolean  @default(false)
  attempts  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email, type, expiresAt], map: "idx_email_codes_lookup")
  @@index([code], map: "idx_email_codes_code")
  @@index([expiresAt], map: "idx_email_codes_expires")
  @@map("email_verification_codes")
}
