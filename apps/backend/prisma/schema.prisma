generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// 用户表 - 存储用户基本信息和账户状态
model User {
  id            String           @id @default(cuid()) /// 用户唯一标识符
  email         String           @unique /// 用户邮箱地址，用于登录和通知
  username      String           @unique /// 用户名，用于显示和登录
  password      String?          /// 密码哈希，OAuth用户可为空
  avatarUrl     String?          /// 用户头像URL
  emailVerified Boolean          @default(false) /// 邮箱是否已验证
  createdAt     DateTime         @default(now()) /// 账户创建时间
  updatedAt     DateTime         @updatedAt /// 最后更新时间
  accountStatus String           @default("active") /// 账户状态：active/inactive/suspended/deleted
  deletedAt     DateTime?        /// 软删除时间戳
  lastActiveAt  DateTime?        /// 最后活跃时间
  todos              Todo[]
  preferences        UserPreferences?
  basicPreferences   UserBasicPreferences?
  aiConfig          UserAIConfig?
  searchConfig      UserSearchConfig?
  notificationConfig UserNotificationConfig?
  storageConfig     UserStorageConfig?
  emailCodes        EmailVerificationCode[]

  @@index([lastActiveAt], map: "idx_users_last_active")
  @@index([deletedAt], map: "idx_users_soft_delete")
  @@index([accountStatus], map: "idx_users_account_status")
  @@index([emailVerified], map: "idx_users_email_verified")
  @@map("users")
}

model UserPreferences {
  id                   String   @id @default(cuid())
  userId               String   @unique
  theme                String   @default("light")
  language             String   @default("zh-CN")
  aiEnabled            Boolean  @default(true)
  autoAnalyze          Boolean  @default(true)
  priorityAnalysis     Boolean  @default(true)
  timeEstimation       Boolean  @default(true)
  subtaskSplitting     Boolean  @default(true)
  aiModel              String   @default("deepseek-chat")
  aiTemperature        Float    @default(0.3)
  aiMaxTokens          Int      @default(1000)
  searchLanguage       String   @default("zh-CN")
  safeSearch           Boolean  @default(true)
  defaultResultCount   Int      @default(10)
  searchEngine         String   @default("google")
  searchRegion         String   @default("CN")
  desktopNotifications Boolean  @default(true)
  emailNotifications   Boolean  @default(false)
  dueReminder          Boolean  @default(true)
  reminderMinutes      Int      @default(30)
  storageMode          String   @default("hybrid")
  autoSync             Boolean  @default(true)
  syncInterval         Int      @default(5)
  offlineMode          Boolean  @default(true)
  conflictResolution   String   @default("merge")
  retryAttempts        Int      @default(3)
  requestTimeout       Int      @default(10000)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

/// 用户基本偏好表 - 存储主题、语言等基本设置
model UserBasicPreferences {
  id        String   @id @default(cuid())
  userId    String   @unique
  theme     String   @default("light")
  language  String   @default("zh-CN")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_user_basic_preferences_user_id")
  @@map("user_basic_preferences")
}

/// 用户AI配置表 - 存储AI相关的所有配置
model UserAIConfig {
  id               String   @id @default(cuid())
  userId           String   @unique
  enabled          Boolean  @default(true)
  autoAnalyze      Boolean  @default(true)
  priorityAnalysis Boolean  @default(true)
  timeEstimation   Boolean  @default(true)
  subtaskSplitting Boolean  @default(true)
  model            String   @default("deepseek-chat")
  temperature      Float    @default(0.3)
  maxTokens        Int      @default(1000)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_user_ai_config_user_id")
  @@map("user_ai_config")
}

/// 用户搜索配置表 - 存储搜索引擎相关配置
model UserSearchConfig {
  id                 String   @id @default(cuid())
  userId             String   @unique
  defaultLanguage    String   @default("zh-CN")
  safeSearch         Boolean  @default(true)
  defaultResultCount Int      @default(10)
  engine             String   @default("google")
  region             String   @default("CN")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_user_search_config_user_id")
  @@map("user_search_config")
}

/// 用户通知配置表 - 存储通知相关设置
model UserNotificationConfig {
  id                   String   @id @default(cuid())
  userId               String   @unique
  desktopNotifications Boolean  @default(true)
  emailNotifications   Boolean  @default(false)
  dueReminder          Boolean  @default(true)
  reminderMinutes      Int      @default(30)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_user_notification_config_user_id")
  @@map("user_notification_config")
}

/// 用户存储配置表 - 存储数据存储和同步相关配置
model UserStorageConfig {
  id                 String   @id @default(cuid())
  userId             String   @unique
  mode               String   @default("hybrid")
  autoSync           Boolean  @default(true)
  syncInterval       Int      @default(5)
  offlineMode        Boolean  @default(true)
  conflictResolution String   @default("merge")
  retryAttempts      Int      @default(3)
  requestTimeout     Int      @default(10000)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_user_storage_config_user_id")
  @@map("user_storage_config")
}

/// 待办事项表 - 存储用户的任务和相关信息
model Todo {
  id            String    @id @default(cuid()) /// 待办事项唯一标识符
  title         String    /// 待办事项标题 (1-200字符)
  description   String?   /// 详细描述
  completed     Boolean   @default(false) /// 是否已完成
  completedAt   DateTime? /// 完成时间
  priority      Int?      /// 优先级 (1-5，5为最高)
  estimatedTime Int?      /// 预估时间（分钟）
  aiAnalyzed    Boolean   @default(false)
  order         Int       @default(0)
  dueDate       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  aiReasoning   String?
  deletedAt     DateTime?
  version       Int       @default(1)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, completed, dueDate], map: "idx_todos_user_status_due")
  @@index([userId, createdAt], map: "idx_todos_user_created")
  @@index([userId, completed, priority], map: "idx_todos_user_status_priority")
  @@index([userId, title, completed], map: "idx_todos_user_title_status")
  @@index([priority], map: "idx_todos_priority")
  @@index([deletedAt], map: "idx_todos_soft_delete")
  @@map("todos")
}




model EmailVerificationCode {
  id        String   @id @default(cuid())
  email     String
  code      String
  type      String   // 'register' | 'login' | 'reset_password'
  expiresAt DateTime
  used      Boolean  @default(false)
  attempts  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email, type, expiresAt], map: "idx_email_codes_lookup")
  @@index([code], map: "idx_email_codes_code")
  @@index([expiresAt], map: "idx_email_codes_expires")
  @@map("email_verification_codes")
}
