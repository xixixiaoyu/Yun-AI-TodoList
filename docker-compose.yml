services:
  # PostgreSQL 数据库
  postgres:
    image: docker.m.daocloud.io/library/postgres:15-alpine
    container_name: yun-todolist-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: yun_todo_db
      POSTGRES_USER: yun_todo_user
      POSTGRES_PASSWORD: postgres123
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=C --lc-ctype=C'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - '5432:5432'
    networks:
      - todolist-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U yun_todo_user -d yun_todo_db']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 缓存
  redis:
    image: docker.m.daocloud.io/library/redis:7-alpine
    container_name: yun-todolist-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - '6379:6379'
    networks:
      - todolist-network
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5

  # 后端 API 服务
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend-dev
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: yun-todolist-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://yun_todo_user:postgres123@postgres:5432/yun_todo_db
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: yun_todo_db
      DATABASE_USER: yun_todo_user
      DATABASE_PASSWORD: postgres123
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      JWT_SECRET: yun-todo-local-jwt-secret-key-2025-very-secure-change-in-production
      JWT_EXPIRES_IN: 15m
      JWT_REFRESH_SECRET: yun-todo-local-refresh-secret-key-2025-very-secure-change-in-production
      JWT_REFRESH_EXPIRES_IN: 30d
      BCRYPT_ROUNDS: 12
      FRONTEND_URL: http://localhost:5173
      LOG_LEVEL: debug
      # SMTP 邮件配置
      SMTP_HOST: smtp.qq.com
      SMTP_PORT: 587
      SMTP_SECURE: false
      SMTP_USER: 1416900346@qq.com
      SMTP_PASSWORD: pezjeplbzkonidjh
      SMTP_FROM: 1416900346@qq.com
      # 开发环境优化
      CHOKIDAR_USEPOLLING: true
      WATCHPACK_POLLING: true
    ports:
      - '3000:3000'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - todolist-network
    volumes:
      # 挂载源代码以支持热重载
      - ./apps/backend/src:/app/apps/backend/src:cached
      - ./apps/backend/prisma:/app/apps/backend/prisma:cached
      - ./packages/shared/src:/app/packages/shared/src:cached
      # 挂载日志和上传目录
      - ./apps/backend/logs:/app/apps/backend/logs
      - ./apps/backend/uploads:/app/uploads
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/v1/health']
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # 前端开发服务
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend-dev
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: yun-todolist-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      VITE_API_BASE_URL: http://localhost:3000/api/v1
      DOCKER_ENV: true
      # 开发环境优化
      CHOKIDAR_USEPOLLING: true
      VITE_HMR_PORT: 5173
    volumes:
      # 挂载源代码以支持热重载
      - ./apps/frontend/src:/app/apps/frontend/src:cached
      - ./apps/frontend/public:/app/apps/frontend/public:cached
      - ./apps/frontend/index.html:/app/apps/frontend/index.html:cached
      - ./apps/frontend/vite.config.ts:/app/apps/frontend/vite.config.ts:cached
      - ./apps/frontend/uno.config.ts:/app/apps/frontend/uno.config.ts:cached
      - ./packages/shared/src:/app/packages/shared/src:cached
    ports:
      - '5173:5173'
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - todolist-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:5173/']
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # 数据库管理工具 (可选)
  adminer:
    image: docker.m.daocloud.io/library/adminer:4-standalone
    container_name: yun-todolist-adminer
    restart: unless-stopped
    ports:
      - '8080:8080'
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - todolist-network
    environment:
      ADMINER_DEFAULT_SERVER: postgres

networks:
  todolist-network:
    driver: bridge
    name: yun-todolist-network

volumes:
  postgres_data:
    name: yun-todolist-postgres-data
  redis_data:
    name: yun-todolist-redis-data
